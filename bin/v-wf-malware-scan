#!/bin/bash

# Check if domain name is provided
if [ -z "$1" ]; then
    echo "Error: Domain name is required"
    exit 1
fi

# Get the domain name
DOMAIN=$1

# Shift off the first argument (domain name) to process additional flags
shift

# Use v-search-domain-owner to find the user associated with the domain
USER=$(v-search-domain-owner $DOMAIN)
if [ -z "$USER" ]; then
    echo "Error: Unable to find user for domain $DOMAIN"
    exit 1
fi

# Construct the scan path
SCAN="/home/$USER/web/$DOMAIN/public_html"

echo "Starting Wordfence malware scan for $DOMAIN at $SCAN"

# Change directory to where Docker commands can be executed
if [ -d /root/wordfence-cli ]; then
    cd /root/wordfence-cli
fi

if [ ! -d "/var/cache/wordfence" ]; then
    mkdir -p /var/cache/wordfence
fi

# Run Wordfence scan using Docker with additional flags
docker run -it -v /var/www:/var/www -v /root/wfcli-conf/wordfence-cli.ini:/root/.config/wordfence/wordfence-cli.ini -v /var/cache/wordfence:/var/cache/wordfence -v $SCAN:$SCAN wordfence-cli:latest malware-scan $SCAN --output-format csv --output-path $SCAN/wordfence-cli-scan.csv --cache-directory /var/cache/wordfence "$@"

# Removing container
docker container rm $(docker container ls -a | grep 'wordfence' | awk '{print $1}') > /dev/null 2>&1

# Display suspicious files
if [ -s $SCAN/wordfence-cli-scan.csv ]; then
    echo "=== Infected files for $DOMAIN ==="
    cat $SCAN/wordfence-cli-scan.csv
    echo "======"
    echo "The file with the list of all infected files can be found at: $SCAN/wordfence-cli-scan.csv"
    chown $USER:$USER $SCAN/wordfence-cli-scan.csv
else
    echo "No infected files were found for $DOMAIN."
    rm $SCAN/wordfence-cli-scan.csv
fi

